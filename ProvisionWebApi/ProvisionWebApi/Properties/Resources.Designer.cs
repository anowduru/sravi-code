//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProvisionWebApi.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ProvisionWebApi.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use MOET
        ///
        ///Declare 
        ///@LogonID varchar(30), 
        ///@EmailAlias varchar(50), 
        ///@LogonName varchar(50) 
        ///
        ///set @LogonID = @user
        ///SET @LogonName = substring(@user,charindex(&apos;\&apos;,@user)+1, len(@user)-charindex(&apos;\&apos;,@user))
        ///SET @EmailAlias = @LogonName + &apos;@microsoft.com&apos; 
        ///
        ///declare @SQL nvarchar(2000)
        ///if (not exists(SELECT * FROM logon WHERE LogonID = @LogonID))
        ///BEGIN
        ///
        ///insert into logon values (@LogonID, @EmailAlias, NULL, NULL, @LogonName, &apos;A&apos;, NULL, &apos;OPS&apos;, NULL, NULL, getdate(), 60, 0, getdate(), getdate(), NUL [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Query_MOETAccess {
            get {
                return ResourceManager.GetString("Query_MOETAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(select * from Moptappr.dbo.Approvers1 (nolock) where ApproverAlias=@User and CurrentLevel=&apos;WWLP VP&apos;)
        ///BEGIN
        ///	INSERT INTO Moptappr.dbo.Approvers1 VALUES ((select max(approverId) + 1 from Moptappr.dbo.Approvers1),&apos;India&apos;,&apos;India&apos;,&apos;India&apos;,@Name,@User,&apos;WWLP VP&apos;,&apos;EPG&apos;)
        ///END
        ///
        ///IF NOT EXISTS(select * from Moptappr.dbo.Approvers2 (nolock) where ApproverAlias=@User and CurrentLevel=&apos;WWLP VP&apos;)
        ///BEGIN
        ///	INSERT INTO Moptappr.dbo.Approvers2 VALUES ((select max(approverId) + 1 from Moptappr.dbo.Approvers2) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Query_MOPET {
            get {
                return ResourceManager.GetString("Query_MOPET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Accessor
        ///
        ///declare @inputXML NVARCHAR(MAX), @AccessorID INT
        ///
        ///Set @inputXML=N&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;
        ///&lt;AccessorRequest xmlns:i=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://MS.IT.Ops.MSLicense.TransactionService.DataContracts/&quot;&gt;
        ///  &lt;Accessor&gt;
        ///    &lt;ApplicationGuID&gt;b139bf32-9d90-4bce-90c3-0f87beb4ba7c&lt;/ApplicationGuID&gt;
        ///    &lt;CredentialType&gt;NTAuth&lt;/CredentialType&gt;
        ///    &lt;CredentialValue&gt;&apos; + @user + N&apos;&lt;/CredentialValue&gt;
        ///    &lt;AccessorStatus&gt;
        ///      &lt;StatusName&gt;Active&lt;/StatusNa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Query_MSL_PQ {
            get {
                return ResourceManager.GetString("Query_MSL_PQ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Accessor
        ///
        ///declare @inputXML NVARCHAR(MAX), @AccessorID INT
        ///
        ///Set @inputXML=N&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;
        ///&lt;AccessorRequest xmlns:i=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://MS.IT.Ops.MSLicense.TransactionService.DataContracts/&quot;&gt;
        ///  &lt;Accessor&gt;
        ///    &lt;ApplicationGuID&gt;b139bf32-9d90-4bce-90c3-0f87beb4ba7c&lt;/ApplicationGuID&gt;
        ///    &lt;CredentialType&gt;NTAuth&lt;/CredentialType&gt;
        ///    &lt;CredentialValue&gt;&apos; + @user + N&apos;&lt;/CredentialValue&gt;
        ///    &lt;AccessorStatus&gt;
        ///      &lt;StatusName&gt;Active&lt;/StatusNa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Query_MSLAccess {
            get {
                return ResourceManager.GetString("Query_MSLAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declare @p1 xml
        ///set @p1=convert(xml,N&apos;&lt;BulkUpdates applicationGUID=&quot;5B4D4550-0260-49ED-98EF-3D7D412B1D23&quot; credentialType=&quot;MSFTE&quot; overrideRoles=&quot;false&quot;&gt;
        ///  &lt;Records&gt;
        ///    &lt;Record&gt;
        ///      &lt;Claims&gt;
        ///        &lt;Alias&gt;&apos;+@alias+&apos;&lt;/Alias&gt;
        ///        &lt;FirstName&gt;&apos;+@fname+&apos;&lt;/FirstName&gt;
        ///        &lt;LastName&gt;&apos;+@lname+&apos;&lt;/LastName&gt;
        ///        &lt;BusinessEmail&gt;&apos;+@email+&apos;&lt;/BusinessEmail&gt;
        ///        &lt;EmpowermentLevel&gt;BD&lt;/EmpowermentLevel&gt;
        ///        &lt;ApproveEmpowermentLevel&gt;Dummy&lt;/ApproveEmpowermentLevel&gt;
        ///        &lt;IsMsUser&gt;True&lt;/IsMsUs [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Query_MSQuote {
            get {
                return ResourceManager.GetString("Query_MSQuote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to use MSLicense
        ///declare @username varchar(100)
        ///set @username = substring(@user,charindex(&apos;\&apos;,@user)+1, len(@user)-charindex(&apos;\&apos;,@user))
        ///declare @SQL nvarchar(2000)
        ///if (not exists(select * from mscontact where emailalias = @username))
        ///BEGIN
        ///	set @SQL = 
        ///	&apos;
        ///	insert mscontact(
        ///
        ///	OperationsCenterCode,
        ///
        ///	SalesLocationCode,
        ///
        ///	OfficeLocation,
        ///
        ///	LogonID,
        ///
        ///	EMailAlias,
        ///
        ///	Name,
        ///
        ///	PhoneNumber,
        ///
        ///	FaxNumber,
        ///
        ///	CreatedDate,
        ///
        ///	CreatedByUser,
        ///
        ///	LastModifiedDate,
        ///
        ///	ModifiedByUser)
        ///
        ///	values (  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Query_VBUIAcess {
            get {
                return ResourceManager.GetString("Query_VBUIAcess", resourceCulture);
            }
        }
    }
}
